{
  "posts": [
    
    {
      "title": "bm25와 한국어 토크나이저를 활용한 Lexical Search 개선",
      "url": "/posts/Lexical-Search/",
      "date": "2025-08-11",
      "categories": ["NLP","AI"],
      "tags": ["bm25s","Kkma","OKT","Kiwi"],
      "content": "Lexical SearchLexical Search는 기본적인 키워드 기반 검색 방법으로 문장 / 쿼리에 담긴 텍스트를 기반으로 검색한다.간단한 Lexical 검색 예시를 들어보면 다음과 같다.Query : YSL 바지 하나 왜 좀 사입던지 해            id      문장                  1      내 돈은 너무 깨끗해 내 두 손은 너무 더러워              2      다리를 뻗어 캐피털 바지에              3      내가 신은 신발은 YSL, 내 기분처럼 구두굽이 되게 높지              4      이번 신상 YSL 바지 예쁘더라, 하나 사야겠어.      1번 문장 :  None2번 문장 : 바지3번 문장 :  YSL4번 문장 :  YSL, 바지, 하나4번 문장이 가장 유사한 키워드가 많기 때문에 4번 문장을 선택한다.이렇게 사용자의 쿼리와 문장을 키워드 단위로 분해하여 유사한 문장을 선택한다.BM25BM25는 Best Matching 25의 약자로 Lexical Search에서 사용되는 대표적인 알고리즘 중 하나이다.주어진 질의와 문서들 간의 관련성을 평가하는데 SOTA( State-of-the-art )의 성능을 보이며, elastic search 에서도 기본 유사도 검색 알고리즘으로 채택했다.TF(Term Frequency, 단어의 등장 빈도)와 IDF(Inverse Document Frequency, 역문서빈도)를 수식에서 이용하지만, 잘 알려진 TF-IDF 알고리즘의 수식과는 살짝 다르다.TF : 문서 안에 해당 단어가 몇번 등장했는지 의미한다.예를 들어 사과가 사과해라는 문장에서는 사과의 TF 는 2이다.IDF : 전체 문서 중 해당 단어가 얼마나 희귀한지를 나타낸다. 문서 빈도의 inverse 값이라 생각하면 좋다.예를 들어 한국어에서 (이)가, 는 등의 흔한 단어는 많이 등장하므로 IDF 값이 낮다.여러 문서들 중 문서 $D$와 사용자 질의 $Q$의 연관성은 다음과 같이 계산한다.BM25s는 다음 조건을 만족할수록 더 큰 점수를 부여한다.  문서 내용에 검색어 출현 빈도가 높을수록  문서 내용이 짧을수록  다른 문서에 검색어가 출현하지 않을수록위에서 예시를 들었던 문서를 바탕으로 BM25를 설명해보겠다.\\(\\begin{align}\\text{score}(D, Q) &amp;= \\sum_{i=1}^{n} \\text{IDF}(q_i) \\cdot \\text{TF}(q_i) \\\\&amp;= \\sum_{i=1}^{n} \\text{IDF}(q_i) \\cdot \\frac{f(q_i, D) \\cdot (k_1 + 1)}{f(q_i, D) + k_1 \\cdot \\left(1 - b + b \\cdot \\frac{\\lvert D \\rvert}{\\text{avgdl}}\\right)} \\\\&amp;= \\sum_{i=1}^{n} \\log\\left(1 + \\frac{N - n_{q_i} + 0.5}{n_{q_i} + 0.5}\\right) \\cdot \\frac{f(q_i, D) \\cdot (k_1 + 1)}{f(q_i, D) + k_1 \\cdot \\left(1 - b + b \\cdot \\frac{\\lvert D \\rvert}{\\text{avgdl}}\\right)}\\end{align}\\)사용자의 질의 $Q$에 대해 문서(여기서는 문장)$D$와의 BM25 점수를 계산하는 공식이다.질의와 문서들 모두 기본적인 토큰화는 된 후에 BM25 알고리즘을 작동시킨다.TF  $f(q_i, D)$ : 사용자의 질의 $Q$의 $i$번째 단어인 $q_i$가 문서 $D$에 몇번 등장했는지 반환한다. (문서 내용에 검색어 출현 빈도가 높을수록)  $\\frac{\\lvert D \\rvert}{\\text{avgdl}}$ : 문서들의 평균 길이에 대한 현재 문서의 길이를 의미한다. (문서 내용이 짧을수록)  $b$, $k_1$ : 조정 가능하지만, 보통 상수로 고정되어있는 파라미터이다.IDF\\[\\text{IDF}(q_i) = \\log\\left(1 + \\frac{N - n_{q_i} + 0.5}{n_{q_i} + 0.5}\\right)\\]  $N$ : 전체 문서의 수  $n_{q_i}$ : $q_i$가 포함된 문서의 수따라서 $n_{q_i}$가 낮을수록 $IDF$값은 높아지기 때문에 다른 문서에 검색어($n_{q_i}$)가 출현하지 않을수록 BM25 점수는 높아진다.BM25S  BM25S is designed to provide a fast, low-dependency and low-memory implementation of BM25 algorithms in Python.BM25s 공식문서에 올라와있는 설명으로 파이썬에서 BM25로 키워드 검색을 할 수 있는 알고리즘이다.1pip install bm25sBM25s 라이브러리를 설치한다.1234567891011121314151617181920212223import bm25s말뭉치들 = [    \"고양이는 만족할 때 그르렁거린다.\",    \"개는 사람의 친구이며 놀이를 좋아한다.\",    \"새는 날개로 하늘을 난다.\",    \"물고기는 아가미로 호흡한다.\",    \"물고기는 그르렁거리지 않는다.\"]# 문서들을 토큰화 시킨 다음 저장한다.말뭉치_BM25토큰화 = bm25s.tokenize(말뭉치들)검색기 = bm25s.BM25(corpus=말뭉치들) #검색 결과를 반환할 때 사용할 원문들을 저장한다.검색기.index(말뭉치_BM25토큰화) #검색할 때 사용하기 위해 토큰 데이터 구조를 생성한다.# You can now search the corpus with a query질의 = \"고양이는 만족할 때 뭐해?\"질의_토큰화 = bm25s.tokenize(질의)문서들, 점수들 = 검색기.retrieve(질의_토큰화, k=2)print(f\"Best result (score: {점수들[0, 0]:.4f}): {문서들[0, 0]}\")# Happy with your index? Save it for later...검색기.save(\"bm25s_index_animals\")실행하면 다음 결과가 출력된다.  Best result (score: 1.1990): 고양이는 만족할 때 그르렁거린다.근데 여기서 토큰화된 결과를 살펴보면 다음과 같다.  질의_토큰화 = Tokenized(    “ids”: [0: [0, 1, 2] ],    “vocab”: [‘고양이는’: 0’만족할’: 1’뭐해’: 2],)  문서들[0,0]의 데이터 = Tokenized(    “ids”: [ 0: [0, 1, 2] ],    “vocab”: [ ‘고양이는’: 0 ‘만족할’: 1 ‘그르렁거린다’: 2 ],)토큰화의 결과가 단순 띄워쓰기 정도이다. 고양이는 은 고양이 와 는 으로 쪼개야한다.뭐해 는 뭐 + 하 + 어 정도로 세부적으로쪼개야한다.따라서 한글 데이터를 바탕으로 BM25 알고리즘을 이용한 lexical 검색을 수행할 때는 추가적인 토크나이저가 필요하다.한국어 토크나이저한국어 토크나이저는 한국어의 특성에 알맞게 토큰화시킬 수 있어야한다.우리가 학생 때 배운 것처럼 어간, 어미, 어근, 접사 등 형태소 단위의 토큰화가 가능해야한다는 것이다.이를 위해 우리는 세가지 토크나이저를 가지고 한번 테스트를 해보려한다.OpenKoreaText : 트위터에서 개발한 오픈소스 한국어 토크나이저Kkma : 서울대에서 개발한 한국어 토크나이저Kiwi(Korean Intelligent Word Identifier) : 오픈소스 한국어 토크나이저Kiwi 의 경우, split_complex라는 옵션을 통해 세부적인 토크나이징 여부를 설정할 수 있다.123456789101112131415161718192021from konlpy.tag import Oktfrom konlpy.tag import Kkmafrom kiwipiepy import Kiwi오텍코 = Okt()꼬꼬마  = Kkma()키위 = Kiwi()text = \"다음 휴가에는 부산국제락페스티벌을 가고싶어요.\"print('오텍코 형태소 분석 :',오텍코.morphs(text))print('꼬꼬마 형태소 분석 :',꼬꼬마.morphs(text))키위_형태소_러프하게 = 키위.tokenize(text, split_complex=False)키위_형태소_세부적으로 = 키위.tokenize(text, split_complex=True)키위_러프한_분석결과 = [token.form for token in 키위_형태소_러프하게]키위_세부적인_분석결과 = [token.form for token in 키위_형태소_세부적으로]print('키위 형태소 분석(rough) :', 키위_러프한_분석결과)print('키위 형태소 분석(detail) :', 키위_세부적인_분석결과)결과는 다음과 같다.  오텍코 형태소 분석 : [‘다음’, ‘휴가’, ‘에는’, ‘부산’, ‘국제’, ‘락페스티벌’, ‘을’, ‘가고싶어요’, ‘.’]꼬꼬마 형태소 분석 : [‘다음’, ‘휴가’, ‘에’, ‘는’, ‘부산’, ‘국제’, ‘락’, ‘페스티벌’, ‘을’, ‘가’, ‘고’, ‘싶’, ‘어요’, ‘.’]키위 형태소 분석(rough) : [‘다음’, ‘휴가’, ‘에’, ‘는’, ‘부산’, ‘국제’, ‘락’, ‘페스티벌’, ‘을’, ‘가’, ‘고’, ‘싶’, ‘어요’, ‘.’]키위 형태소 분석(detail) : [‘다음’, ‘휴가’, ‘에’, ‘는’, ‘부산’, ‘국제’, ‘락’, ‘페스티벌’, ‘을’, ‘가’, ‘고’, ‘싶’, ‘어’, ‘요’, ‘.’]육안으로 봤을 때, 꼬꼬마 와 키위 형태소 분석(rough) 의 토크나이징 정도는 유사해보인다.오텍코 의 성능은 비교적 떨어져보인다.그런데 토크나이저를 사용하다보면 중의적인 토크나이징이 가능할 때 서로 다른 결과를 내놓는다.전용역  오텍코 형태소 분석 : [‘전’, ‘용역’]꼬꼬마 형태소 분석 : [‘전용’, ‘역’]키위 형태소 분석(rough) : [‘전’, ‘용역’]키위 형태소 분석(detail) : [‘전’, ‘용역’]고물가  오텍코 형태소 분석 : [‘고물’, ‘가’]꼬꼬마 형태소 분석 : [‘고물가’]키위 형태소 분석(rough) : [‘고’, ‘물가’]키위 형태소 분석(detail) : [‘고’, ‘물가’]개인기  오텍코 형태소 분석 : [‘개’, ‘인기’]꼬꼬마 형태소 분석 : [‘개인기’]키위 형태소 분석(rough) : [‘개인기’]키위 형태소 분석(detail) : [‘개인기’]한국어 토크나이저 + BM25위에서 볼 수 있듯이 토크나이징 모델에 따라 토큰화 결과가 다르다.수행할 task의 문장들을 여럿 넣어보며 현재 task에서 가장 적절한 토크나이징 모델이 무엇인지 결정하는 것이 중요할 것이다.원하는 토크나이저를 골랐다면, 해당 토크나이저로 1차 토크나이징을 한뒤 BM25에 적용하면 된다.위에 올린 bm25코드 중간에 해당 코드를 추가하고, 사용자 질의 역시 토크나이징해서 쿼리로 넣으면 된다.123456from konlpy.tag import Kkma#...꼬꼬마  = Kkma()말뭉치들 = [str(꼬꼬마.morphs(문장)) for 문장 in 말뭉치들]#...",
      "excerpt": "Lexical Search"
    },
    
    {
      "title": "네오브루탈리즘 웹디자인의 새로운 물결",
      "url": "/posts/neobrutalism-design/",
      "date": "2025-08-10",
      "categories": ["Design","Web"],
      "tags": ["neobrutalism","design","web","ui","ux"],
      "content": "디지털 시대의 반란: 네오브루탈리즘네오브루탈리즘은 완벽함에 대한 반역이다. 매끄럽고 둥근 모서리, 그라데이션, 부드러운 애니메이션으로 가득한 현대 웹에서 거칠고 각진 형태로 돌아가는 것.왜 지금 브루탈리즘인가?  “Beauty is not pretty. Beauty is something else entirely.”      어느 디자이너의 고백  현대 웹디자인의 동질화에 대한 피로감이 크다:  모든 사이트가 비슷해 보임  개성의 부재  기술적 완벽함의 추구가 창의성을 억압네오브루탈리즘의 특징  굵은 테두리와 그림자          4px 이상의 두꺼운 border      Drop shadow가 아닌 flat shadow 사용        원색과 대비    12345.brutal-element {  background: #ff0080;  border: 4px solid #000;  box-shadow: 8px 8px 0 0 #000;}        타이포그래피의 실험          시스템 폰트 사용      대문자 남용      글자 간격 조정으로 긴장감 조성      구현에서의 고려사항접근성을 해치지 않기브루탈한 디자인이 사용자 경험을 해치면 안 된다:  색대비 비율 4.5:1 이상 유지  키보드 네비게이션 가능하도록  모바일 터치 영역 44px 이상성능 최적화거친 디자인이라고 해서 무거워서는 안 된다:  CSS만으로 효과 구현  불필요한 JavaScript 애니메이션 지양  웹폰트 로딩 최적화미래의 방향네오브루탈리즘은 단순한 트렌드가 아니라 인간성 회복의 움직임이다. 완벽한 기계가 아닌, 불완전한 인간이 만드는 웹을 추구한다.이 글은 실험적인 디자인으로 작성되었습니다. 브라우저가 깨져 보인다면 그것이 의도된 것입니다.",
      "excerpt": "디지털 시대의 반란: 네오브루탈리즘"
    },
    
    {
      "title": "디지털 혼돈 속에서 찾는 질서",
      "url": "/posts/digital-chaos-blog/",
      "date": "2025-08-09",
      "categories": ["Philosophy","Digital"],
      "tags": ["chaos","order","digital","art","philosophy"],
      "content": "혼돈의 미학디지털 세계에서 완벽한 픽셀들이 줄지어 서 있다. 모든 것이 계산되고, 측정되고, 최적화되어 있다. 그런데 왜 우리는 여전히 불완전함에 끌리는 걸까?의도적인 오류12345// 때로는 버그가 더 아름답다function glitchEffect() {  const randomOffset = Math.random() * 10;  element.style.transform = `translate(${randomOffset}px, ${randomOffset}px)`;}이 코드는 완벽하지 않다. 예측할 수 없는 움직임을 만들어낸다. 하지만 이런 예측불가능성이 디지털 아트에 생명을 불어넣는다.노이즈의 철학  노이즈는 정보의 반대가 아니라, 다른 종류의 정보다.세 가지 관점  기술적 관점: 노이즈는 신호의 방해요소  예술적 관점: 노이즈는 창작의 도구  철학적 관점: 노이즈는 존재의 증거실험: 움직이는 요소들이 블로그의 배경에서 움직이는 기하학적 도형들을 봤는가? 그것들은:  무작위성과 규칙성의 결합  사용자 상호작용에 반응  시간에 따라 변화코드로 표현한 철학1234567@keyframes digital-chaos {  0% { transform: translate(0, 0) rotate(0deg); }  25% { transform: translate(-5px, 5px) rotate(90deg); }  50% { transform: translate(5px, -5px) rotate(180deg); }  75% { transform: translate(-5px, -5px) rotate(270deg); }  100% { transform: translate(0, 0) rotate(360deg); }}결론: 불완전한 완벽함디지털 혼돈은 새로운 질서의 시작이다. 기계의 정확성과 인간의 불완전성이 만나는 지점에서, 진정한 디지털 아트가 탄생한다.“혼돈 속에서도 패턴이 있고, 질서 속에서도 무작위성이 있다.”",
      "excerpt": "혼돈의 미학"
    }
    
  ]
}